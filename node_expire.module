<?php
// $Id: node_expire.module,v 1.9.2.6 2010/12/11 18:42:07 vikramy Exp $

/**
 * @file
 * Set a timer into your content, allowing you to perform customized actions.
 */

DEFINE('NODE_EXPIRE_FORMAT',     'Y-m-d');
DEFINE('NODE_EXPIRE_FORMAT_JS', 'yy-mm-dd');

/**
 * Implements hook_cron().
 *  TODO: update this to look for fields
 */
function node_expire_cron() {
  watchdog('node expire', 'Checking for nodes to expire', NULL);
  $time = REQUEST_TIME;
  // get all active fields
  
  /*
  $result = db_select('node', 'n')->fields('n');
  $result->join('node_expire', 'ne', 'n.nid = ne.nid');
  $result->condition('ne.expire', $time, '<=');
  $result = $result->execute();
  $nids = array();
  while($node = $result->fetchAssoc()) {
      watchdog('node expire', 'Expired node ='.$node['nid'], NULL);
      $nids[] = $node['nid'];
     // node_expire_set_expired($node['nid']);
      $node = node_load($node['nid']);
	  $author = user_load($node->uid);
      rules_invoke_event('node_expired', &$node, $author);
  }
  */
}

function node_expire_field_info() {
  return array(
    'node_expire_field' => array(
      'label' => t('Date action'), 
      'description' => t('Set a date to perform an action (e.g. expire a node after a certain date).'), 
      'default_widget' => 'node_expire_default_widget', 
      'default_formatter' => 'node_expire_default_formatter',
    ),
  );
}


function node_expire_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'node_expire_default_formatter' => array(
      'label' => t('Displays countodwn to authorised users'),
      'field types' => array('node_expire_field'),
    ),
  );
}


function node_expire_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'node_expire_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p> ' . $item['node_expire'] . '</p>';
      }
      break;
  }

  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 * One widget is provided.
 * - A simple datepicker with a term reference field
 */
function node_expire_field_widget_info() {
  return array(
    'node_expire_default_widget' => array(
      'label' => t('Default date picker'),
      'field types' => array('node_expire_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Only one widget type implemented currently.
 *
 * The 'node_expire_default_widget' shows a date field, and a term reference field
 *
 */

function node_expire_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

     dpm($instance);
  switch ($instance['widget']['type']) {

   case 'node_expire_default_widget':
     $element['node_expire'] = array(
       '#type' => 'textfield',
       '#title' => 'Action Date',
       '#size' => 10,
       '#default_value' => '',
       '#attributes' => array('class' => array('date-entry')),
       '#description' => t('The date to set off an action'),
      );

      break;

  }
  return $element;
}




/**
 * Implements hook_permission().
 */
function node_expire_permission() {
  return array(
    'administer node expire' => array(
      'title' => t('administer node expire'),
      'description' => t('TODO Add a description for \'administer node expire\''),
    ),
    'edit node expire' => array(
      'title' => t('edit node expire'),
      'description' => t('TODO Add a description for \'edit node expire\''),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function node_expire_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'node_expire'),
  );
}

