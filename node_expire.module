<?php
// $Id: node_expire.module,v 1.9.2.6 2010/12/11 18:42:07 vikramy Exp $

/*
 *TODO: change module name to someting entity and time related
 *           look at changing cron so it runs on the hour/half hour/etc  - system_run_automated_cron, change variables in there
 *           automate inserting some default rules
 *           move automation to either a wizard or separate module
 *           get cron function finding fields and acting on them
 */



/**
 * @file
 * Set a timer into your content, allowing you to perform customized actions.
 */

DEFINE('NODE_EXPIRE_FORMAT',     'd-m-Y H:i');
DEFINE('NODE_EXPIRE_FORMAT_JS', 'yy-mm-dd');

/**
 * Implements hook_cron().
 *  TODO: update this to look for fields
 */
function node_expire_cron() {
  $time = date(NODE_EXPIRE_FORMAT, REQUEST_TIME);
  // get all active fields
  
  $fields = db_select('field_config', 'f')->fields('f',array('field_name'));
  $fields->condition('type', 'node_expire_field', '=');
  $fields = $fields->execute();

  
  while($field_arr = $fields->fetchAssoc()) {
    $field = $field_arr['field_name'];
    $result = db_select('field_data_'.$field, 'fd')->fields('fd', array('entity_type', 'entity_id', 'revision_id', $field.'_date', $field.'_tid', $field.'_active', 'delta'));
	$result->condition($field.'_date', $time, '<=');
	$result->condition($field.'_active', '1', '=');
    $result = $result->execute();
	while($record = $result->fetchAssoc()) {
	  // node_load doesn't get menu data?!
	  $node = node_load($record['entity_id'], $record['revision_id']);
	  node_object_prepare($node);
	  if(isset($node->menu['mlid'])){
	    $node->menu['enabled'] = true;
	  }
	  watchdog('node expire', 'Date action on: ' . $node->title, NULL);
	 // $term = taxonomy_term_load($record[$field.'_tid']);
	  rules_invoke_event('node_expired', $node, $record[$field.'_tid'], $field, $record['delta']);
	}
  }
}

function node_expire_field_info() {
  return array(
    'node_expire_field' => array(
      'label' => t('Date action'), 
      'description' => t('Set a date to perform an action (e.g. expire a node after a certain date).'), 
      'default_widget' => 'node_expire_default_widget', 
      'default_formatter' => 'node_expire_default_formatter',
    ),
  );
}


function node_expire_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'node_expire_default_formatter' => array(
      'label' => t('Displays countodwn to authorised users'),
      'field types' => array('node_expire_field'),
    ),
  );
}


function node_expire_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $account = $GLOBALS['user'];
  if (!user_access('edit node expire', $account)) {
    return $element;
  }
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'node_expire_default_formatter':
      foreach ($items as $delta => $item) {
	    $term = taxonomy_term_load($item['tid']);
        $element[$delta]['#markup'] = '<p> '. $term->name .': ' . $item['date'] . '</p>';
      }
      break;
  }

  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 * One widget is provided.
 * - A simple datepicker with a term reference field
 */
function node_expire_field_widget_info() {
  return array(
    'node_expire_default_widget' => array(
      'label' => t('Default date picker'),
      'field types' => array('node_expire_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Only one widget type implemented currently.
 *
 * The 'node_expire_default_widget' shows a date field, and a term reference field
 *
 */

function node_expire_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {

   case 'node_expire_default_widget':

     // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
	 if ( isset($items[$delta]['date'])) {
	   $date = $items[$delta]['date'];
	 }else {
	    $date = '31-12-2011 00:00:00';
	 }
	 
	 if (isset($items[$delta]['tid'])) {
	   $tid = $items[$delta]['tid'];
	 } else {
	   $tid = 'null';
	 }

	 if(isset($items[$delta]['active'])) {
	   $active = $items[$delta]['active'];
	 } else {
	   $active = '1';
	 }
    
     // Provide a format using regular PHP format parts (see documentation on php.net).
     // If you're using a date_select, the format will control the order of the date parts in the selector,
     // rearrange them any way you like. Parts left out of the format will not be displayed to the user.
     $element['node_expire'] = array();
     $element += array (
	   '#type' => 'fieldset',
       '#element_validate' => array('node_expire_default_validate'),
	 );
	 $element['date'] = array();
	 $element['date'] += array(
       '#type' => 'date_popup',
       '#default_value' => $date,
	   '#date_format' => NODE_EXPIRE_FORMAT,
       '#date_label_position' => 'within',

      // '#description' => t('The date to set off an action'),
      );
	  $vid = variable_get('node_expire_default_vocab');
	  $vocabulary = taxonomy_vocabulary_load($vid);
	  $terms = taxonomy_get_tree($vid);
	  $opt = array();
	  $opt[] ="--Select--";
	  foreach($terms as $term) {
	    $opt[$term->tid] = $term->name;
	  }
	  $element['tid'] = array();
	  $element['tid'] += array(
        '#type' => 'select',
        '#title'=> 'Rule',
		'#options' => $opt,
		'#default_value' => $tid,
	  );
	  
	  $element['active'] = array();
	  $element['active'] += array (
	    '#type' => 'checkbox', 
        '#title' => t('Active.'),
		'#default_value' => $active,
	  );
      break;

  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function node_expire_field_is_empty($item, $field) {

  if (isset($item['date'])){
    return false;
  } else {
    return true;
  }
  
}


function node_expire_default_validate($element, &$form_state){
  //set values to valid datetime
}

/**
 * Implements hook_permission().
 */
function node_expire_permission() {
  return array(
    'administer node expire' => array(
      'title' => t('administer node expire'),
      'description' => t('TODO Add a description for \'administer node expire\''),
    ),
    'edit node expire' => array(
      'title' => t('edit node expire'),
      'description' => t('TODO Add a description for \'edit node expire\''),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function node_expire_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'node_expire'),
  );
}

